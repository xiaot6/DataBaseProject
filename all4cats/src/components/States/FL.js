import React, { Component } from "react";
import { Typography, Button, TextField, List, ListItem, ListItemText } from '@material-ui/core'
import ReactDOM from "react-dom";
import Plot from 'react-plotly.js';


export default class Prediction extends Component {
  constructor(props) {
    super(props);

    
    this.state = {
      time: ""
    };

  }

  predictThisState() {
    console.log("clicked search");
    if (this.state.stateForPredict == "CA") {
      this.setState({
        index : 0
      })
    } else if (this.state.stateForPredict == "TX") {
      this.setState({
        index : 1
      })
    }
 
    
  }

  onChangeSaveState(e) {
    const state = e.target.value;
        this.setState({
          stateForPredict: state
        });
  } 


  render() {
    return (
        <div>
          <h2>
            This is FL prediction.
          </h2>
        <div>
        <Plot
        data={[
          {
            x: ["2005-01-31","2005-02-01","2005-02-02","2005-02-03","2005-02-04","2005-02-05","2005-02-06","2005-02-07","2005-02-08","2005-02-09","2005-02-10","2005-02-11","2005-02-12","2005-02-13","2005-02-14","2005-02-15","2005-02-16","2005-02-17","2005-02-18","2005-02-19","2005-02-20","2005-02-21","2005-02-22","2005-02-23","2005-02-24","2005-02-25","2005-02-26","2005-02-27","2005-02-28","2005-03-01","2005-03-02","2005-03-03","2005-03-04","2005-03-05","2005-03-06","2005-03-07","2005-03-08","2005-03-09","2005-03-10","2005-03-11","2005-03-12","2005-03-13","2005-03-14","2005-03-15","2005-03-16","2005-03-17","2005-03-18","2005-03-19","2005-03-20","2005-03-21","2005-03-22","2005-03-23","2005-03-24","2005-03-25","2005-03-26","2005-03-27","2005-03-28","2005-03-29","2005-03-30","2005-03-31","2005-04-01","2005-04-02","2005-04-03","2005-04-04","2005-04-05","2005-04-06","2005-04-07","2005-04-08","2005-04-09","2005-04-10","2005-04-11","2005-04-12","2005-04-13","2005-04-14","2005-04-15","2005-04-16","2005-04-17","2005-04-18","2005-04-19","2005-04-20","2005-04-21","2005-04-22","2005-04-23","2005-04-24","2005-04-25","2005-04-26","2005-04-27","2005-04-28","2005-04-29","2005-04-30","2005-05-01","2005-05-02","2005-05-03","2005-05-04","2005-05-05","2005-05-06","2005-05-07","2005-05-08","2005-05-09","2005-05-10","2005-05-11","2005-05-12","2005-05-13","2005-05-14","2005-05-15","2005-05-16","2005-05-17","2005-05-18","2005-05-19","2005-05-20","2005-05-21","2005-05-22","2005-05-23","2005-05-24","2005-05-25","2005-05-26","2005-05-27","2005-05-28","2005-05-29","2005-05-30","2005-05-31","2005-06-01","2005-06-02","2005-06-03","2005-06-04","2005-06-05","2005-06-06","2005-06-07","2005-06-08","2005-06-09","2005-06-10","2005-06-11","2005-06-12","2005-06-13","2005-06-14","2005-06-15","2005-06-16","2005-06-17","2005-06-18","2005-06-19","2005-06-20","2005-06-21","2005-06-22","2005-06-23","2005-06-24","2005-06-25","2005-06-26","2005-06-27","2005-06-28","2005-06-29","2005-06-30","2005-07-01","2005-07-02","2005-07-03","2005-07-04","2005-07-05","2005-07-06","2005-07-07","2005-07-08","2005-07-09","2005-07-10","2005-07-11","2005-07-12","2005-07-13","2005-07-14","2005-07-15","2005-07-16","2005-07-17","2005-07-18","2005-07-19","2005-07-20","2005-07-21","2005-07-22","2005-07-23","2005-07-24","2005-07-25","2005-07-26","2005-07-27","2005-07-28","2005-07-29","2005-07-30","2005-07-31","2005-08-01","2005-08-02","2005-08-03","2005-08-04","2005-08-05","2005-08-06","2005-08-07","2005-08-08"],
            y: [199234,202896,206743,210877,215319,220130,225360,230681,235971,240946,245706,250229,254482,258280,262100,265885,269242,271768,273275,274160,274307,274110,273727,272865,271870,270612,269046,266917,264417,261486,258299,255019,251837,248634,245143,241568,237530,233407,228894,224598,220068,215905,211649,207358,203072,198694,194226,189945,185951,182340,178873,175372,172236,169335,167062,165011,163161,161651,160718,159869,159182,158426,157917,157439,156900,156097,155007,153720,152362,150878,149277,147777,146244,144822,143324,141983,140708,139707,138792,138171,137696,137453,137308,137197,137196,137245,137552,138028,138609,139288,140076,140974,141924,142959,144039,145289,146753,148406,150107,151841,153732,155620,157651,159738,161864,163753,165589,167266,168825,170144,171417,172495,173504,174361,175233,175869,176597,177584,178664,179753,180763,181903,183037,184170,185346,186601,187783,189130,190532,191930,193189,194562,196042,197603,198941,200282,201525,202932,204400,205793,207031,208174,209495,210770,212098,213291,214556,215943,217336,218706,219947,221318,222665,224019,225247,226486,227420,228499,229789,231243,232758,234078,235363,236442,237476,238413,239432,240504,241496,242113,242484,242851,243355,244141,245100,245712,246112,246498,247131,247770,248670,249858,251186,252490,253749,254983,256235,257962,260023,262291],
            type: 'scatter',
            mode: 'lines+markers',
            marker: {color: 'red'},
          },
          {type: 'scatter', x: this.state.x, y: this.state.y},
        ]}
        layout={ {width: 500, height: 400, title: 'A FL Plot'} }
          />
  
        </div>
        <div>
        <form noValidate autoComplete="off" className="formStyle">
              {/* listening for title in value, once change call onChange function to temporarily hold the title, until submission */}
              <TextField id="outlined-basic" label="State" value={this.state.stateForPredict} onChange={this.onChangeSaveState} variant="outlined"/>
            </form>
            <Button onClick={this.predictThisState}>
                Predict the state
            </Button>
        </div>

      </div>
    )
  }
}
